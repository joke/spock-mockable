plugins {
    id 'java'
    id 'groovy'
    id 'jacoco'
}

dependencies {
    testImplementation enforcedPlatform(project(':dependencies'))
    testImplementation enforcedPlatform('org.apache.groovy:groovy-bom:4.0.6')
    testImplementation enforcedPlatform('org.spockframework:spock-bom:2.3-groovy-4.0')
    testImplementation project(path: ':spock-mockable', configuration: 'shadow')
    testImplementation 'net.bytebuddy:byte-buddy'
    testImplementation 'org.objenesis:objenesis'
    testImplementation 'org.slf4j:slf4j-simple'
    testImplementation 'org.spockframework:spock-core'
}

test {
    finalizedBy jacocoTestReport

    useJUnitPlatform()
    jacoco {
        enabled = false
        includes = ['io.github.joke.spockmockable.agent.**',
                    'io.github.joke.spockmockable.hooks.**']
        includeNoLocationClasses = true
        dumpOnExit = true
        classDumpDir = layout.buildDirectory.dir('jacoco/dumps').get().asFile
    }
    jvmArgs([
//            '-agentlib:jdwp=transport=dt_socket,server=n,address=localhost:5005,suspend=n',
            "${jacoco.asJvmArg}",
            "-javaagent:${classpath.find { it.name.contains('spock-mockable') }.absolutePath}",
            '-Dorg.slf4j.simpleLogger.defaultLogLevel=debug'
    ])
}

jacocoTestReport {
    dependsOn test
    classDirectories.setFrom([])
    additionalSourceDirs project(':spock-mockable').sourceSets.main.java.sourceDirectories.singleFile
    additionalClassDirs layout.buildDirectory.dir('jacoco/dumps').get().asFile
}

compileTestGroovy {
//    groovyOptions.fork = true
//    groovyOptions.forkOptions.jvmArgs = [
//            '-agentlib:jdwp=transport=dt_socket,server=n,address=localhost:5006,suspend=n'
//    ]
}
